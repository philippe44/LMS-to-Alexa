BASE		= ..
OS		:= $(shell uname)
CFLAGS 		+= -Wno-multichar

ifeq ($(OS),Darwin)
LDFLAGS 	+= -Wl,-dead_strip
else
LDFLAGS 	+= -Wl,--gc-sections
endif

TOOLS		= ./tools
SRC			= ./squeeze2cast
SQUEEZETINY	= ./squeezetiny
JANSSON		= $(BASE)/jansson
NANOPB		= $(BASE)/nanopb
MDNSSD		= $(BASE)/mdnssd
VALGRIND	= $(BASE)/valgrind
UPNP 		= $(BASE)/libupnp/1.6.19

DEFINES 	= -D_FILE_OFFSET_BITS=64 -DPB_FIELD_16BIT -DHAVE_STDINT_H

CFLAGS 		+= -fdata-sections -ffunction-sections 

vpath %.c $(TOOLS):$(SRC):$(SQUEEZETINY):$(JANSSON)/src:$(NANOPB):$(MDNSSD)
vpath %.cpp $(TOOLS):$(SRC):$(SQUEEZETINY):$(JANSSON)/src:$(NANOPB):$(MDNSSD)

INCLUDE = -I. \
		  -I$(BASE)\
		  -I$(VALGRIND)/memcheck -I$(VALGRIND)/include \
		  -I$(SQUEEZETINY) \
		  -I$(TOOLS) \
		  -I$(SRC) -I$(SRC)/inc \
		  -I$(UPNP)/ixml/inc -I$(UPNP)/upnp/inc -I$(UPNP)/build/inc -I$(UPNP)/threadutil/inc \
		  -I$(JANSSON)/src \
		  -I$(NANOPB) \
		  -I$(MDNSSD) \
		  		  
DEPS	= $(SQUEEZETINY)/squeezedefs.h
				  
SOURCES = slimproto.c buffer.c tinyutils.c output_http.c main.c \
		  stream.c decode.c pcm.c \
		  flac_thru.c m4a_thru.c thru.c \
		  util_common.c cast_util.c util.c log_util.c \
		  castcore.c cast_parse.c castmessage.pb.c squeeze2cast.c \
		  pb_common.c pb_decode.c pb_encode.c dump.c error.c hashtable.c strconv.c \
		  hashtable_seed.c load.c memory.c pack_unpack.c strbuffer.c utf.c value.c \
	  	  mdnssd-min.c
		
SOURCES_LIBS = output.c
		
OBJECTS		= $(patsubst %.c,$(OBJ)/%.o,$(filter %.c,$(SOURCES))) $(patsubst %.cpp,$(OBJ)/%.o,$(filter %.cpp,$(SOURCES))) $(patsubst %.c,$(OBJ)/%.o,$(SOURCES_LIBS)) 

LIBRARY 	= $(OBJ)/libixml.a 

all: $(EXECUTABLE)

$(EXECUTABLE): $(OBJECTS)
	$(CC) $(OBJECTS) $(LIBRARY) $(LDFLAGS) -o $@
	

$(OBJECTS): $(DEPS) | bin $(OBJ)

$(OBJ):
	@mkdir -p $@
	
bin:	
	@mkdir -p bin

$(OBJ)/%.o : %.c
	$(CC) $(CFLAGS) $(CPPFLAGS) $(INCLUDE) $< -c -o $@
	
$(OBJ)/%.o : %.cpp
	$(CC) $(CFLAGS) $(CPPFLAGS) $(INCLUDE) $< -c -o $@
	
	
clean:
	rm -f $(OBJECTS) $(OBJECTS_STATIC) $(EXECUTABLE) $(EXECUTABLE_STATIC)
